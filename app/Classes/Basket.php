<?phpnamespace App\Classes;use App\Models\Order;use App\Models\Product;use Illuminate\Support\Facades\Auth;class Basket{    protected $order;    /**     * Basket constructor.     *     * @param  bool  $createOrder     */    public function __construct($createOrder = false)    {        $orderId = session('orderId');        if(is_null($orderId) && $createOrder) {            $data['user_id'] = [];            if(Auth::check()) {                $data['user_id'] =Auth::id();            }            $this->order = Order::create($data);            session(['orderId' => $this->order->id]);        }        else {            $this->order = Order::findOrFail($orderId);        }    }    /**     * @return mixed     */    public function getOrder()    {        return $this->order;    }    public function quantityAvailable() {        foreach ($this->order->products as $product) {            if($product->quantity < $this->getPivotRow($product)->quantity) {                return false;            }        }        return true;    }    public function saveOrder($name,$phone) {        if(!$this->quantityAvailable()) {            return false;        }        return $this->order->saveOrder($name,$phone);    }    protected function getPivotRow(Product $product) {        return $this->order->products()->where('product_id',$product->id)->first()->pivot;    }    public function addProduct(Product $product) {        if($this->order->products->contains($product->id)) {            $pivotRow = $this->getPivotRow($product);            $pivotRow->quantity++;            if($pivotRow->quantity > $product->quantity) {                return false;            }            $pivotRow->update();        }        else {            if($product->quantity == 0) {                return false;            }            $this->order->products()->attach($product->id);        }        Order::changeOrderPrice($product->price);    }    public function removeProduct(Product $product) {        if($this->order->products->contains($product->id)) {            $pivotRow = $this->getPivotRow($product);            if($pivotRow->quantity > 1) {                $pivotRow->quantity--;                $pivotRow->update();            }            else {                $this->order->products()->detach($product->id);;            }        }        Order::changeOrderPrice(-$product->price);    }}