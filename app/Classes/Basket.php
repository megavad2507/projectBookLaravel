<?phpnamespace App\Classes;use App\Mail\OrderCreated;use App\Models\Order;use App\Models\Product;use App\Services\CurrencyConversion;use Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\Mail;class Basket{    protected $order;    /**     * Basket constructor.     *     * @param  bool  $createOrder     */    public function __construct($createOrder = false)    {        $order = session('order');        if(is_null($order) && $createOrder) {            $data = [];            if(Auth::check()) {                $data['user_id'] = Auth::id();            }            $data['currency_id'] = CurrencyConversion::getCurrentCurrencyFromSession()->id;            $this->order = new Order($data);            session(['order' => $this->order]);        }        else {            $this->order = $order;        }    }    /**     * @return mixed     */    public function getOrder()    {        return $this->order;    }    public function quantityAvailable($updateCount = false) {        $products = collect([]);        foreach ($this->order->products as $orderProduct) {            $product = Product::findOrFail($orderProduct->id);            if($orderProduct->quantityInOrder > $product->quantity) {                return false;            }            if($updateCount) {                $product->quantity -= $orderProduct->quantityInOrder;                $products->push($product);            }        }//        if($updateCount) {//            $products->map->save();//        }        return true;    }    public function saveOrder($name,$phone,$email) {        if(!$this->quantityAvailable(true)) {            return false;        }        $this->order->saveOrder($name,$phone,$email);        Mail::to($email)->send(new OrderCreated($name,$this->getOrder()));        return true;    }    protected function getOrderProduct(Product $product) {        return $this->order->products->where('id',$product->id)->first();    }    public function addProduct(Product $product) {        if($this->order->products->contains($product->id)) {            $orderProduct = $this->getOrderProduct($product);            if($orderProduct->quantityInOrder > $product->quantity) {                return false;            }            $orderProduct->quantityInOrder++;        }        else {            if($product->quantity == 0) {                return false;            }            $product->quantityInOrder = 1;            $this->order->products->push($product);        }    }    public function removeProduct(Product $product) {        if($this->order->products->contains($product)) {            $orderProduct = $this->getOrderProduct($product);            if($orderProduct->quantityInOrder > 1) {                $orderProduct->quantityInOrder--;            }            else {                $this->order->products->pop();            }        }    }}